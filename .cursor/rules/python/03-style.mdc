---
description: Python 3.11+ style guide: Apply when working with modern Python code
globs: **/*.py
alwaysApply: false
---
# Python 3.11+ Style Guide

## Core Rules
Essential standards for modern Python development using the latest language features.

## Type Hinting

### Required
- Always use type hints for function parameters and return values
- Use built-in collection types: `list[T]`, `dict[K, V]`, `set[T]`, `tuple[T, ...]`
- Use pipe operator for unions: `int | str | None` instead of `Union` or `Optional`
- Use `Self` for methods returning class instances (method chaining)

### Advanced Features
- `Literal["value"]` for exact value specifications  
- `LiteralString` for security-sensitive string parameters
- `Protocol` for structural subtyping (duck typing)
- `TypedDict` for structured dictionaries
- `class Container[T]:` syntax for generics (Python 3.12+)
- `TypeIs` for type guard functions (Python 3.13+)

## Code Organization
- **DRY**: Single source of truth for all logic and validation
- **Single Responsibility**: One clear purpose per class/function
- **Composition over Inheritance**: Prefer composition for reusability

## Formatting
- **Indentation**: 4 spaces, never tabs
- **Line Length**: 88 characters maximum
- **Imports**: Group by standard library → third party → local
- **Naming**: Classes `PascalCase`, functions/variables `snake_case`, constants `UPPER_CASE`
- **Spacing**: Two blank lines before classes/functions, one before methods

## Data Structures
- **Preferred**: Pydantic v2 `BaseModel` for data validation and serialization
- **Alternative**: `@dataclass(frozen=True, slots=True)` for simple containers
- **Collections**: Use `collections.abc` for protocols, `deque` for queues, `Counter` for counting

## Performance
- Use `dataclass(slots=True)` for memory efficiency
- Prefer generators over lists for large datasets
- Use `__slots__` in classes to reduce memory footprint

## Documentation
- Docstrings for all public functions/classes (Google format)
- Type hints reduce documentation needs

## Examples

### Basic Function Signature
```python
def process_data(items: list[float], threshold: float, multiplier: float | None = None) -> list[float]:
    """Process numbers above threshold."""
    mult = multiplier or 2.0
    return [item * mult for item in items if item > threshold]
```

### Modern Data Models
```python
# Pydantic v2 (Recommended)
from pydantic import BaseModel, Field

class UserProfile(BaseModel):
    name: str = Field(min_length=1)
    age: int = Field(ge=0, le=150)
    role: Literal["admin", "user", "guest"] = "user"

# High-performance dataclass alternative
@dataclass(frozen=True, slots=True)
class Point:
    x: float
    y: float
```

### Quick Migration Checklist
- `List[T]` → `list[T]`
- `Dict[K, V]` → `dict[K, V]`  
- `Union[A, B]` → `A | B`
- `Optional[T]` → `T | None`
- Add `from typing import Self` for method chaining
- Use `dataclass(slots=True)` for performance
