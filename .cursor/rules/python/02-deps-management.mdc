---
description: Python dependency management with UV: Attaches when dealing with Python dependencies or package management
globs:
alwaysApply: false
---
# Python Dependency Management with UV

## Introduction
This guide explains how to manage Python dependencies using the UV package manager, a fast alternative to pip and other package managers.

## Guidelines

### Project Setup
- Initialize new projects with `uv init`
- Use `uv python pin` to set project Python version
- Create virtual environment with `uv venv`
- Activate with `source .venv/bin/activate`

### Dependency Management
- Declare dependencies in pyproject.toml
- Use `uv add` to add new dependencies
- Use `uv add --dev` or `uv add --group <n>` for development dependencies
- Use `uv remove` to remove dependencies
- Use `uv sync` to install/update dependencies
  - Use `uv sync --extra <group>` to install specific extras/groups
  - Use `uv sync --all-extras` to install all extras/groups
- Use `uv lock` to generate/update lockfile
- Use `uv tree` to view dependency tree

### Script Management
- Use UV's script support for standalone scripts
- Declare script dependencies with `uv add --script`
- Run scripts in isolated environments with `uv run`

### Python Version Management
- Use UV to manage multiple Python versions
- Install versions: `uv python install <version>`
- List versions: `uv python list`
- Pin versions: `uv python pin <version>`
- Support multiple Python versions in CI

### CI Environment Setup
- Use `export UV_SYSTEM_PYTHON=1` in CI environments 
- Use `uv sync --extra ci` for test dependencies
- Use `uv run <command>` to execute commands in the UV environment

## Examples

```python
# Example pyproject.toml
[project]
name = "my-project"
version = "0.1.0"
description = "A well-structured Python project"
dependencies = [
    "requests>=2.31.0",
    "pydantic>=2.0.0",
]

[dependency-groups]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=24.0.0",
    "ruff>=0.2.0",
]
ci = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"
```

### Common UV Commands
```bash
# Initialize a project
uv init

# Pin Python version
uv python pin 3.12

# Create and activate virtual environment
uv venv
source .venv/bin/activate

# Add and manage dependencies
uv add requests pydantic
uv add --dev pytest black ruff
uv sync
uv lock

# Install with specific extras
uv sync --extra dev
uv sync --extra ci
uv sync --all-extras

# Run scripts in isolated environments
uv run pytest
```
